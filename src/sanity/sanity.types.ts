/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type OverviewCard = {
  _type: "overviewCard";
  icon: Icon;
  title: string;
  text: string;
};

export type Stats = {
  _type: "stats";
  title: string;
  value: number;
};

export type Richtext = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Editor = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      alt?: string;
      _type: "customImage";
      _key: string;
    }
  | ({
      _key: string;
    } & Callout)
>;

export type Callout = {
  _type: "callout";
  type: "error" | "success" | "info" | "warning";
  title?: string;
  text: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Price = {
  _id: string;
  _type: "price";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  currency: "KES" | "$" | "\u20AC" | "\xA3";
  price: number;
  billingCycle: string;
  billingRate: string;
  text: string;
  features: Array<{
    isIncluded: boolean;
    text: string;
    _type: "feature";
    _key: string;
  }>;
  url?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  date: string;
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "customImage";
  };
  client?: string;
  website?: string;
  location?: string;
  overview: Editor;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description: string;
  icon: Icon;
  overview: Editor;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  excerpt: string;
  keywords?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "customImage";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  publishedAt: string;
  body: Editor;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "customImage";
  };
  twitter?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hero: {
    title: string;
    text: string;
    primaryCta: Cta;
    secondaryCta?: Cta;
  };
  services: {
    title: string;
    services: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "service";
    }>;
  };
  about: {
    videoUrl: string;
    title: string;
    text: string;
    stats: Array<
      {
        _key: string;
      } & Stats
    >;
    primaryCta: Cta;
    secondaryCta: Cta;
  };
  workingProcess: {
    title: string;
    processes: Array<
      {
        _key: string;
      } & OverviewCard
    >;
  };
  projects: {
    title: string;
    text: string;
    projects: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "project";
    }>;
  };
  testimonials: {
    title: string;
    testimonials: Array<{
      text: string;
      authorName: string;
      authorProfession: string;
      authorImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: "customImage";
      };
      _type: "testimony";
      _key: string;
    }>;
  };
  chooseUs: {
    title: string;
    text: string;
    features: Array<string>;
    box: {
      title: string;
      text: string;
    };
  };
  pricing: {
    title: string;
    plans: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "price";
    }>;
  };
  contactBannerOne: {
    text: string;
    cta: Cta;
  };
  contact: {
    title: string;
    text: string;
    cta: Array<
      {
        _key: string;
      } & Cta
    >;
  };
  blog: {
    title: string;
    blog: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "post";
    }>;
  };
  faq: {
    title: string;
    faq: Array<{
      question: string;
      answer: string;
      _type: "faq";
      _key: string;
    }>;
  };
  contactBannerTwo: {
    text: string;
    primaryCta: Cta;
    secondaryCta?: Cta;
  };
};

export type CustomImage = {
  _type: "customImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  alt?: string;
};

export type Cta = {
  _type: "cta";
  title?: string;
  text: string;
  icon?: Icon;
  url: string;
};

export type Configuration = {
  _id: string;
  _type: "configuration";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  socialLinks: Array<{
    name: string;
    icon: Icon;
    url: string;
    _type: "socialLink";
    _key: string;
  }>;
  footer: Array<{
    title: string;
    links: Array<{
      title: string;
      url: string;
      _type: "link";
      _key: string;
    }>;
    _type: "section";
    _key: string;
  }>;
};

export type Icon = {
  _type: "icon";
  name?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | OverviewCard
  | Stats
  | Richtext
  | Editor
  | Callout
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Price
  | Project
  | Service
  | Tag
  | Post
  | Author
  | Category
  | Slug
  | Home
  | CustomImage
  | Cta
  | Configuration
  | Icon;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: homePageQuery
// Query:   *[_type == "home"][0]{    hero {      title,      text,      primaryCta {        text,        url      },      secondaryCta {        text,        url      },      "socialLinks": *[_type == "configuration"][0]{        socialLinks[]{          _key,          name,          url,          icon {            name          }        }      }.socialLinks    },    services {      title,      services[]->{        _id,        title,        "slug": slug.current,        description,         icon {          name        }      }    },    about {      videoUrl,      title,       text,       stats[]{        _key,        value,        title      },      primaryCta {        text,         url,         icon {          name,        }      },      secondaryCta {        title,        text,         url,         icon {          name        }      }    },    workingProcess {      title,       processes[] {        _key,        text,         title,        icon {          name        }      }    },    projects {      title,       text,      projects[]-> {        _id,        "image": coverImage.asset->.url,        title,        "category": category->.name,        "slug": slug.current,        date      }    },    testimonials {      title,       testimonials[]{        authorName,        authorProfession,        "authorImage": authorImage.asset->.url,        text,        _key     }   },    chooseUs,   pricing {     title,     plans[]->{       _id,       title,       text,       currency,       price,       billingRate,       billingCycle,       features[]{         _key,         text,         isIncluded       },       url     }   },   contactBannerOne {    text,    cta {      text,       icon {        name      },      url    }  },   contact {    title,    text,    cta[] {      _key,      title,      text,       icon {              name      },      url    }  },   blog {    title,     blog[]->{      _id,      title,      "slug": slug.current,      "image": coverImage.asset->url,      "plainText": pt::text(body),      publishedAt     }   },   faq {    title,    faq[]{      _key,      question,      answer    }  },   contactBannerTwo {    text,     primaryCta {      text,       icon {        name      },      url    },     secondaryCta {      text,       icon {        name      },      url    }  }  }
export type HomePageQueryResult = {
  hero: {
    title: string;
    text: string;
    primaryCta: {
      text: string;
      url: string;
    };
    secondaryCta: {
      text: string;
      url: string;
    } | null;
    socialLinks: Array<{
      _key: string;
      name: string;
      url: string;
      icon: {
        name: string | null;
      };
    }> | null;
  };
  services: {
    title: string;
    services: Array<{
      _id: string;
      title: string;
      slug: string;
      description: string;
      icon: {
        name: string | null;
      };
    }>;
  };
  about: {
    videoUrl: string;
    title: string;
    text: string;
    stats: Array<{
      _key: string;
      value: number;
      title: string;
    }>;
    primaryCta: {
      text: string;
      url: string;
      icon: {
        name: string | null;
      } | null;
    };
    secondaryCta: {
      title: string | null;
      text: string;
      url: string;
      icon: {
        name: string | null;
      } | null;
    };
  };
  workingProcess: {
    title: string;
    processes: Array<{
      _key: string;
      text: string;
      title: string;
      icon: {
        name: string | null;
      };
    }>;
  };
  projects: {
    title: string;
    text: string;
    projects: Array<{
      _id: string;
      image: string | null;
      title: string;
      category: string;
      slug: string;
      date: string;
    }>;
  };
  testimonials: {
    title: string;
    testimonials: Array<{
      authorName: string;
      authorProfession: string;
      authorImage: string | null;
      text: string;
      _key: string;
    }>;
  };
  chooseUs: {
    title: string;
    text: string;
    features: Array<string>;
    box: {
      title: string;
      text: string;
    };
  };
  pricing: {
    title: string;
    plans: Array<{
      _id: string;
      title: string;
      text: string;
      currency: "$" | "\xA3" | "\u20AC" | "KES";
      price: number;
      billingRate: string;
      billingCycle: string;
      features: Array<{
        _key: string;
        text: string;
        isIncluded: boolean;
      }>;
      url: string | null;
    }>;
  };
  contactBannerOne: {
    text: string;
    cta: {
      text: string;
      icon: {
        name: string | null;
      } | null;
      url: string;
    };
  };
  contact: {
    title: string;
    text: string;
    cta: Array<{
      _key: string;
      title: string | null;
      text: string;
      icon: {
        name: string | null;
      } | null;
      url: string;
    }>;
  };
  blog: {
    title: string;
    blog: Array<{
      _id: string;
      title: string;
      slug: string;
      image: string | null;
      plainText: string;
      publishedAt: string;
    }>;
  };
  faq: {
    title: string;
    faq: Array<{
      _key: string;
      question: string;
      answer: string;
    }>;
  };
  contactBannerTwo: {
    text: string;
    primaryCta: {
      text: string;
      icon: {
        name: string | null;
      } | null;
      url: string;
    };
    secondaryCta: {
      text: string;
      icon: {
        name: string | null;
      } | null;
      url: string;
    } | null;
  };
} | null;
// Variable: footerQuery
// Query:   *[_type == "configuration"][0]{  socialLinks[]{    _key,    name,    url,    icon {      name    }  },  footer[]{    _key,    title,    links[]{      _key,      title,      url    }  }}
export type FooterQueryResult = {
  socialLinks: Array<{
    _key: string;
    name: string;
    url: string;
    icon: {
      name: string | null;
    };
  }>;
  footer: Array<{
    _key: string;
    title: string;
    links: Array<{
      _key: string;
      title: string;
      url: string;
    }>;
  }>;
} | null;
// Variable: projectsPageQuery
// Query:   *[_type == "project"]{    _id,    "slug": slug.current,    title,    "image": coverImage.asset->url,    date,    category->{      name    },  }
export type ProjectsPageQueryResult = Array<{
  _id: string;
  slug: string;
  title: string;
  image: string | null;
  date: string;
  category: {
    name: string;
  };
}>;
// Variable: projectPageQuery
// Query:  *[_type == "project" && slug.current == $slug][0]{  _id,   title,   "slug": slug.current,  date,  "image": coverImage.asset->.url,  client,  website,  location,  overview,  "projects": *[_type == "project" && _id != ^._id] | order(publishedAt desc)[0..6] {    _id,    title,    "image": coverImage.asset->.url,    "slug": slug.current,    "category": category->.name  } }
export type ProjectPageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  date: string;
  image: string | null;
  client: string | null;
  website: string | null;
  location: string | null;
  overview: Editor;
  projects: Array<{
    _id: string;
    title: string;
    image: string | null;
    slug: string;
    category: string;
  }>;
} | null;
// Variable: blogPageQuery
// Query:   *[_type == "post"][0..20] | order(publishedAt desc){    _id,    "slug": slug.current,    title,    "image": coverImage.asset->url,    excerpt,    "plainText": pt::text(body),    publishedAt  }
export type BlogPageQueryResult = Array<{
  _id: string;
  slug: string;
  title: string;
  image: string | null;
  excerpt: string;
  plainText: string;
  publishedAt: string;
}>;
// Variable: postPageQuery
// Query:   *[_type == "post" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    "coverImage": coverImage.asset->url,    publishedAt,    excerpt,    "headings": body[style in ["h2", "h3", "h4", "h5", "h6"]],    body,    category-> {      name,      "slug": slug.current    },    tags[]->{      "slug": slug.current,      name    },    author->{      name,      twitter,      "image": image.asset->url,      "slug": slug.current    },    "plainText": pt::text(body),    "keywords": string::split(keywords, ","),    _updatedAt,    "relatedPosts": *[      _type == "post"      && _id != ^._id       && count(tags[@._ref in ^.^.tags[]._ref]) > 0    ][0..5]{      title,      "slug": slug.current,      "coverImage": coverImage.asset->url,      publishedAt,      "plainText": pt::text(body)    },    "recentPosts": *[      _type == "post"       && _id != ^._id      && !(_id in *[          _type == "post"          && _id != ^.^._id           && count(tags[@._ref in ^.^.^.tags[]._ref]) > 0        ]._id)      ] | order(publishedAt desc)[0..5]{      title,      "slug": slug.current,      "coverImage": coverImage.asset->url,      publishedAt,      "plainText": pt::text(body)    }  }  
export type PostPageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  coverImage: string | null;
  publishedAt: string;
  excerpt: string;
  headings: Array<never>;
  body: Editor;
  category: {
    name: string;
    slug: string;
  } | null;
  tags: Array<{
    slug: string;
    name: string;
  }> | null;
  author: {
    name: string;
    twitter: string | null;
    image: string | null;
    slug: string;
  };
  plainText: string;
  keywords: Array<string> | null;
  _updatedAt: string;
  relatedPosts: Array<{
    title: string;
    slug: string;
    coverImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
  recentPosts: Array<{
    title: string;
    slug: string;
    coverImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
} | null;
// Variable: servicesPageQuery
// Query:    *[_type == "service"][0..20]{     _id,      title,      "slug": slug.current,      description,       icon {         name      }   } 
export type ServicesPageQueryResult = Array<{
  _id: string;
  title: string;
  slug: string;
  description: string;
  icon: {
    name: string | null;
  };
}>;
// Variable: servicePageQuery
// Query:   *[_type == "service" && slug.current == $slug][0]{    _id,     title,     "slug": slug.current,     description,     overview,    "services": *[_type == "service"]{      _id,      title,       "slug": slug.current    }  }
export type ServicePageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  description: string;
  overview: Editor;
  services: Array<{
    _id: string;
    title: string;
    slug: string;
  }>;
} | null;
// Variable: sitemapQuery
// Query:  {  "pages": *[_type == "page"]{    "slug": slug.current,    "_createdAt": _createdAt  },  "blog": *[_type == "post"]{    "slug": slug.current,    "publishedAt": publishedAt  },  "services": *[_type == "service"]{    "slug": slug.current,    _createdAt  },  "projects": *[_type == "post"]{    "slug": slug.current,    _createdAt  }}
export type SitemapQueryResult = {
  pages: Array<never>;
  blog: Array<{
    slug: string;
    publishedAt: string;
  }>;
  services: Array<{
    slug: string;
    _createdAt: string;
  }>;
  projects: Array<{
    slug: string;
    _createdAt: string;
  }>;
};
