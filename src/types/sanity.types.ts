/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Testimonials = {
  _type: "testimonials";
  title: string;
  testimonials: Array<{
    text: string;
    authorName: string;
    authorProfession: string;
    authorImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "testimony";
    _key: string;
  }>;
};

export type Services = {
  _type: "services";
  title: string;
  services: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "service";
  }>;
};

export type Projects = {
  _type: "projects";
  title: string;
  text: string;
  projects: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Pricing = {
  _type: "pricing";
  title: string;
  plans: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "price";
  }>;
};

export type OverviewCards = {
  _type: "overviewCards";
  title: string;
  overViewCards: Array<
    {
      _key: string;
    } & OverviewCard
  >;
};

export type Hero = {
  _type: "hero";
  title: string;
  text: string;
  primaryCta: Cta;
  secondaryCta?: Cta;
};

export type Faq = {
  _type: "faq";
  title: string;
  faq: Array<{
    question: string;
    answer: string;
    _type: "faq";
    _key: string;
  }>;
};

export type Contact = {
  _type: "contact";
  title: string;
  text: string;
  cta: Array<
    {
      _key: string;
    } & Cta
  >;
};

export type ContactBannerTwo = {
  _type: "contactBannerTwo";
  text: string;
  primaryCta: Cta;
  secondaryCta?: Cta;
};

export type ContactBannerOne = {
  _type: "contactBannerOne";
  text: string;
  cta: Cta;
};

export type ChooseUs = {
  _type: "chooseUs";
  title: string;
  text: string;
  features: Array<string>;
  box: {
    title: string;
    text: string;
  };
};

export type Blog = {
  _type: "blog";
  title: string;
  blog: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
};

export type About = {
  _type: "about";
  videoUrl: string;
  title: string;
  text: string;
  stats: Array<
    {
      _key: string;
    } & Stats
  >;
  primaryCta: Cta;
  secondaryCta: Cta;
};

export type CustomBlocks = Array<
  | {
      body: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?:
              | "normal"
              | "h1"
              | "h2"
              | "h3"
              | "h4"
              | "h5"
              | "h6"
              | "blockquote";
            listItem?: "bullet" | "number";
            markDefs?: Array<
              | ({
                  _key: string;
                } & HighlightColor)
              | ({
                  _key: string;
                } & TextColor)
            >;
            level?: number;
            _type: "block";
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
            _key: string;
          }
        | ({
            _key: string;
          } & Callout)
      >;
      _type: "editor";
      _key: string;
    }
  | ({
      _key: string;
    } & About)
  | ({
      _key: string;
    } & Blog)
  | ({
      _key: string;
    } & ChooseUs)
  | ({
      _key: string;
    } & ContactBannerOne)
  | ({
      _key: string;
    } & ContactBannerTwo)
  | ({
      _key: string;
    } & Contact)
  | ({
      _key: string;
    } & Faq)
  | ({
      _key: string;
    } & Hero)
  | ({
      _key: string;
    } & OverviewCards)
  | ({
      _key: string;
    } & Pricing)
  | ({
      _key: string;
    } & Projects)
  | ({
      _key: string;
    } & Services)
  | ({
      _key: string;
    } & Testimonials)
>;

export type OverviewCard = {
  _type: "overviewCard";
  icon: Icon;
  title: string;
  text: string;
};

export type Stats = {
  _type: "stats";
  title: string;
  value: number;
};

export type Cta = {
  _type: "cta";
  title?: string;
  text: string;
  icon?: Icon;
  url: string;
};

export type Richtext = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Editor = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<
        | ({
            _key: string;
          } & HighlightColor)
        | ({
            _key: string;
          } & TextColor)
      >;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }
  | ({
      _key: string;
    } & Callout)
>;

export type Callout = {
  _type: "callout";
  type: "error" | "success" | "info" | "warning";
  title?: string;
  text: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Price = {
  _id: string;
  _type: "price";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  currency: "C$" | "$" | "\u20AC" | "\xA3" | "KES";
  price: number;
  billingCycle: string;
  billingRate: string;
  text: string;
  features: Array<{
    isIncluded: boolean;
    text: string;
    _type: "feature";
    _key: string;
  }>;
  url?: string;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Configuration = {
  _id: string;
  _type: "configuration";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  socialLinks: Array<{
    name: string;
    icon: Icon;
    url: string;
    _type: "socialLink";
    _key: string;
  }>;
  footer: {
    sections: Array<{
      title: string;
      links: Array<
        {
          _key: string;
        } & Link
      >;
      _type: "section";
      _key: string;
    }>;
    footerNote: string;
  };
};

export type Link = {
  _type: "link";
  type: "url" | "email" | "phone" | "reference" | "pdf";
  label?: string;
  reference?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "service";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      };
  url?: string;
  email?: string;
  phone?: string;
  pdf?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  date: string;
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  client?: string;
  website?: string;
  location?: string;
  overview: Editor;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description: string;
  icon: Icon;
  overview: Editor;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  excerpt: string;
  keywords?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  publishedAt: string;
  body: Editor;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  twitter?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  showTitle?: boolean;
  slug?: Slug;
  description?: string;
  keywords?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: CustomBlocks;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type HighlightColor = {
  _type: "highlightColor";
  label?: string;
  value?: string;
};

export type TextColor = {
  _type: "textColor";
  label?: string;
  value?: string;
};

export type SimplerColor = {
  _type: "simplerColor";
  label?: string;
  value?: string;
};

export type Icon = {
  _type: "icon";
  name?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Testimonials
  | Services
  | Projects
  | Pricing
  | OverviewCards
  | Hero
  | Faq
  | Contact
  | ContactBannerTwo
  | ContactBannerOne
  | ChooseUs
  | Blog
  | About
  | CustomBlocks
  | OverviewCard
  | Stats
  | Cta
  | Richtext
  | Editor
  | Callout
  | Price
  | Tag
  | Configuration
  | Link
  | SanityFileAsset
  | Project
  | Service
  | Post
  | Author
  | Category
  | Page
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | MediaTag
  | Slug
  | HighlightColor
  | TextColor
  | SimplerColor
  | Icon;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug][0]{  _id,  title,  showTitle,  "slug": slug.current,  "ogImage": ogImage.asset->url,  "createdAt": _createdAt,  description,     content[]{    ...,    _type == "hero" => {      _key,      _type,      title,      text,      primaryCta,      secondaryCta,      "socialLinks": *[_type == "configuration"][0]{        socialLinks[]{          _key,          name,          url,          icon {            name          }        }      }.socialLinks    },    _type == "services" => {      _type,      _key,      title,      services[]->{        _id,        title,        slug,        description,         icon {          name        }      }    },    _type == "projects" => {      _key,      _type,      title,       text,      projects[]-> {        _id,        "image": coverImage.asset->.url,        title,        "category": category->.name,        "slug": slug.current,        date      }    },    _type == "testimonials" => {      _key,      _type,      title,       testimonials[]{        authorName,        authorProfession,        "authorImage": authorImage.asset->.url,        text,        _key      }    },     _type == "pricing" => {      _key,       _type,      title,      plans[]->{        _id,        title,        text,        currency,        price,        billingRate,        billingCycle,        features[]{          _key,          text,          isIncluded        },        url      }    },    _type == "blog" => {      _key,      _type,      title,       blog[]->{        _id,        title,        "slug": slug.current,        "image": coverImage.asset->url,        "plainText": pt::text(body),        publishedAt      }    },  },  "keywords": string::split(keywords, ","),  _updatedAt,  }
export type PageQueryResult = {
  _id: string;
  title: string;
  showTitle: boolean | null;
  slug: string | null;
  ogImage: string | null;
  createdAt: string;
  description: string | null;
  content: Array<
    | {
        _key: string;
        _type: "about";
        videoUrl: string;
        title: string;
        text: string;
        stats: Array<
          {
            _key: string;
          } & Stats
        >;
        primaryCta: Cta;
        secondaryCta: Cta;
      }
    | {
        _key: string;
        _type: "blog";
        title: string;
        blog: Array<{
          _id: string;
          title: string;
          slug: string;
          image: string | null;
          plainText: string;
          publishedAt: string;
        }>;
      }
    | {
        _key: string;
        _type: "chooseUs";
        title: string;
        text: string;
        features: Array<string>;
        box: {
          title: string;
          text: string;
        };
      }
    | {
        _key: string;
        _type: "contact";
        title: string;
        text: string;
        cta: Array<
          {
            _key: string;
          } & Cta
        >;
      }
    | {
        _key: string;
        _type: "contactBannerOne";
        text: string;
        cta: Cta;
      }
    | {
        _key: string;
        _type: "contactBannerTwo";
        text: string;
        primaryCta: Cta;
        secondaryCta?: Cta;
      }
    | {
        body: Array<
          | ({
              _key: string;
            } & Callout)
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?:
                | "blockquote"
                | "h1"
                | "h2"
                | "h3"
                | "h4"
                | "h5"
                | "h6"
                | "normal";
              listItem?: "bullet" | "number";
              markDefs?: Array<
                | ({
                    _key: string;
                  } & HighlightColor)
                | ({
                    _key: string;
                  } & TextColor)
              >;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
            }
        >;
        _type: "editor";
        _key: string;
      }
    | {
        _key: string;
        _type: "faq";
        title: string;
        faq: Array<{
          question: string;
          answer: string;
          _type: "faq";
          _key: string;
        }>;
      }
    | {
        _key: string;
        _type: "hero";
        title: string;
        text: string;
        primaryCta: Cta;
        secondaryCta: Cta | null;
        socialLinks: Array<{
          _key: string;
          name: string;
          url: string;
          icon: {
            name: string | null;
          };
        }> | null;
      }
    | {
        _key: string;
        _type: "overviewCards";
        title: string;
        overViewCards: Array<
          {
            _key: string;
          } & OverviewCard
        >;
      }
    | {
        _key: string;
        _type: "pricing";
        title: string;
        plans: Array<{
          _id: string;
          title: string;
          text: string;
          currency: "$" | "\xA3" | "\u20AC" | "C$" | "KES";
          price: number;
          billingRate: string;
          billingCycle: string;
          features: Array<{
            _key: string;
            text: string;
            isIncluded: boolean;
          }>;
          url: string | null;
        }>;
      }
    | {
        _key: string;
        _type: "projects";
        title: string;
        text: string;
        projects: Array<{
          _id: string;
          image: string | null;
          title: string;
          category: string;
          slug: string;
          date: string;
        }>;
      }
    | {
        _key: string;
        _type: "services";
        title: string;
        services: Array<{
          _id: string;
          title: string;
          slug: Slug;
          description: string;
          icon: {
            name: string | null;
          };
        }>;
      }
    | {
        _key: string;
        _type: "testimonials";
        title: string;
        testimonials: Array<{
          authorName: string;
          authorProfession: string;
          authorImage: string | null;
          text: string;
          _key: string;
        }>;
      }
  > | null;
  keywords: Array<string> | null;
  _updatedAt: string;
} | null;
// Variable: homePageQuery
// Query: *[_type == "page" && _id == "home"][0]{     content[]{    ...,    _type == "hero" => {      _key,      _type,      title,      text,      primaryCta,      secondaryCta,      "socialLinks": *[_type == "configuration"][0]{        socialLinks[]{          _key,          name,          url,          icon {            name          }        }      }.socialLinks    },    _type == "services" => {      _type,      _key,      title,      services[]->{        _id,        title,        slug,        description,         icon {          name        }      }    },    _type == "projects" => {      _key,      _type,      title,       text,      projects[]-> {        _id,        "image": coverImage.asset->.url,        title,        "category": category->.name,        "slug": slug.current,        date      }    },    _type == "testimonials" => {      _key,      _type,      title,       testimonials[]{        authorName,        authorProfession,        "authorImage": authorImage.asset->.url,        text,        _key      }    },     _type == "pricing" => {      _key,       _type,      title,      plans[]->{        _id,        title,        text,        currency,        price,        billingRate,        billingCycle,        features[]{          _key,          text,          isIncluded        },        url      }    },    _type == "blog" => {      _key,      _type,      title,       blog[]->{        _id,        title,        "slug": slug.current,        "image": coverImage.asset->url,        "plainText": pt::text(body),        publishedAt      }    },  },  _updatedAt}
export type HomePageQueryResult = {
  content: Array<
    | {
        _key: string;
        _type: "about";
        videoUrl: string;
        title: string;
        text: string;
        stats: Array<
          {
            _key: string;
          } & Stats
        >;
        primaryCta: Cta;
        secondaryCta: Cta;
      }
    | {
        _key: string;
        _type: "blog";
        title: string;
        blog: Array<{
          _id: string;
          title: string;
          slug: string;
          image: string | null;
          plainText: string;
          publishedAt: string;
        }>;
      }
    | {
        _key: string;
        _type: "chooseUs";
        title: string;
        text: string;
        features: Array<string>;
        box: {
          title: string;
          text: string;
        };
      }
    | {
        _key: string;
        _type: "contact";
        title: string;
        text: string;
        cta: Array<
          {
            _key: string;
          } & Cta
        >;
      }
    | {
        _key: string;
        _type: "contactBannerOne";
        text: string;
        cta: Cta;
      }
    | {
        _key: string;
        _type: "contactBannerTwo";
        text: string;
        primaryCta: Cta;
        secondaryCta?: Cta;
      }
    | {
        body: Array<
          | ({
              _key: string;
            } & Callout)
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?:
                | "blockquote"
                | "h1"
                | "h2"
                | "h3"
                | "h4"
                | "h5"
                | "h6"
                | "normal";
              listItem?: "bullet" | "number";
              markDefs?: Array<
                | ({
                    _key: string;
                  } & HighlightColor)
                | ({
                    _key: string;
                  } & TextColor)
              >;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
            }
        >;
        _type: "editor";
        _key: string;
      }
    | {
        _key: string;
        _type: "faq";
        title: string;
        faq: Array<{
          question: string;
          answer: string;
          _type: "faq";
          _key: string;
        }>;
      }
    | {
        _key: string;
        _type: "hero";
        title: string;
        text: string;
        primaryCta: Cta;
        secondaryCta: Cta | null;
        socialLinks: Array<{
          _key: string;
          name: string;
          url: string;
          icon: {
            name: string | null;
          };
        }> | null;
      }
    | {
        _key: string;
        _type: "overviewCards";
        title: string;
        overViewCards: Array<
          {
            _key: string;
          } & OverviewCard
        >;
      }
    | {
        _key: string;
        _type: "pricing";
        title: string;
        plans: Array<{
          _id: string;
          title: string;
          text: string;
          currency: "$" | "\xA3" | "\u20AC" | "C$" | "KES";
          price: number;
          billingRate: string;
          billingCycle: string;
          features: Array<{
            _key: string;
            text: string;
            isIncluded: boolean;
          }>;
          url: string | null;
        }>;
      }
    | {
        _key: string;
        _type: "projects";
        title: string;
        text: string;
        projects: Array<{
          _id: string;
          image: string | null;
          title: string;
          category: string;
          slug: string;
          date: string;
        }>;
      }
    | {
        _key: string;
        _type: "services";
        title: string;
        services: Array<{
          _id: string;
          title: string;
          slug: Slug;
          description: string;
          icon: {
            name: string | null;
          };
        }>;
      }
    | {
        _key: string;
        _type: "testimonials";
        title: string;
        testimonials: Array<{
          authorName: string;
          authorProfession: string;
          authorImage: string | null;
          text: string;
          _key: string;
        }>;
      }
  > | null;
  _updatedAt: string;
} | null;
// Variable: footerQuery
// Query: *[_type == "configuration"][0]{  socialLinks[]{    _key,    name,    url,    icon {      name    }  },  footer{  ...,  sections[]{    _key,    title,    links[]{      _key,        label,  type,  type == "reference" => {    "label": select(      defined(label) => label,      defined(reference->.title) => reference->.title,      true => "link"    ),    reference->{      _type,      "slug": slug.current    }  },  type == "pdf" => {    "url": pdf.asset->url + "?dl"  },  type == "url" => {    url  },  type == "phone" => {    "url": "tel:" + phone  },  type == "email" => {    "url": "mailto:" + email  }    }  },   }}
export type FooterQueryResult = {
  socialLinks: Array<{
    _key: string;
    name: string;
    url: string;
    icon: {
      name: string | null;
    };
  }>;
  footer: {
    sections: Array<{
      _key: string;
      title: string;
      links: Array<{
        _key: string;
        label: string | "link" | null;
        type: "email" | "pdf" | "phone" | "reference" | "url";
        reference:
          | {
              _type: "page";
              slug: string | null;
            }
          | {
              _type: "post";
              slug: string;
            }
          | {
              _type: "project";
              slug: string;
            }
          | {
              _type: "service";
              slug: string;
            }
          | null;
        url: string | null;
      }>;
    }>;
    footerNote: string;
  };
} | null;
// Variable: projectsPageQuery
// Query: *[_type == "project"]{    _id,    "slug": slug.current,    title,    "image": coverImage.asset->url,    date,    category->{      name    },  }
export type ProjectsPageQueryResult = Array<{
  _id: string;
  slug: string;
  title: string;
  image: string | null;
  date: string;
  category: {
    name: string;
  };
}>;
// Variable: projectPageQuery
// Query: *[_type == "project" && slug.current == $slug][0]{  _id,   title,   "slug": slug.current,  date,  "image": coverImage.asset->.url,  client,  website,  location,  overview,  "projects": *[_type == "project" && _id != ^._id] | order(publishedAt desc)[0..6] {    _id,    title,    "image": coverImage.asset->.url,    "slug": slug.current,    "category": category->.name  } }
export type ProjectPageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  date: string;
  image: string | null;
  client: string | null;
  website: string | null;
  location: string | null;
  overview: Editor;
  projects: Array<{
    _id: string;
    title: string;
    image: string | null;
    slug: string;
    category: string;
  }>;
} | null;
// Variable: blogPageQuery
// Query: *[_type == "post"][0..20] | order(publishedAt desc){    _id,    "slug": slug.current,    title,    "image": coverImage.asset->url,    excerpt,    "plainText": pt::text(body),    publishedAt  }
export type BlogPageQueryResult = Array<{
  _id: string;
  slug: string;
  title: string;
  image: string | null;
  excerpt: string;
  plainText: string;
  publishedAt: string;
}>;
// Variable: postPageQuery
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    "coverImage": coverImage.asset->url,    publishedAt,    excerpt,    "headings": body[style in ["h2", "h3", "h4", "h5", "h6"]],    body,    category-> {      name,      "slug": slug.current    },    tags[]->{      "slug": slug.current,      name    },    author->{      name,      twitter,      "image": image.asset->url,      "slug": slug.current    },    "plainText": pt::text(body),    "keywords": string::split(keywords, ","),    _updatedAt,    "relatedPosts": *[      _type == "post"      && _id != ^._id       && count(tags[@._ref in ^.^.tags[]._ref]) > 0    ][0..5]{      title,      "slug": slug.current,      "coverImage": coverImage.asset->url,      publishedAt,      "plainText": pt::text(body)    },    "recentPosts": *[      _type == "post"       && _id != ^._id      && !(_id in *[          _type == "post"          && _id != ^.^._id           && count(tags[@._ref in ^.^.^.tags[]._ref]) > 0        ]._id)      ] | order(publishedAt desc)[0..5]{      title,      "slug": slug.current,      "coverImage": coverImage.asset->url,      publishedAt,      "plainText": pt::text(body)    }  }
export type PostPageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  coverImage: string | null;
  publishedAt: string;
  excerpt: string;
  headings: Array<never>;
  body: Editor;
  category: {
    name: string;
    slug: string;
  } | null;
  tags: Array<{
    slug: string;
    name: string;
  }> | null;
  author: {
    name: string;
    twitter: string | null;
    image: string | null;
    slug: string;
  };
  plainText: string;
  keywords: Array<string> | null;
  _updatedAt: string;
  relatedPosts: Array<{
    title: string;
    slug: string;
    coverImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
  recentPosts: Array<{
    title: string;
    slug: string;
    coverImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
} | null;
// Variable: servicesPageQuery
// Query: *[_type == "service"][0..20]{     _id,      title,      slug,      description,       icon {         name      }   }
export type ServicesPageQueryResult = Array<{
  _id: string;
  title: string;
  slug: Slug;
  description: string;
  icon: {
    name: string | null;
  };
}>;
// Variable: servicePageQuery
// Query: *[_type == "service" && slug.current == $slug][0]{    _id,     title,     "slug": slug.current,     description,     overview,    "services": *[_type == "service"]{      _id,      title,       "slug": slug.current    }  }
export type ServicePageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  description: string;
  overview: Editor;
  services: Array<{
    _id: string;
    title: string;
    slug: string;
  }>;
} | null;
// Variable: sitemapQuery
// Query: {  "pages": *[_type == "page" && _id!="home"]{    "slug": slug.current,    "_createdAt": _createdAt  },  "blog": *[_type == "post"]{    "slug": slug.current,    "publishedAt": publishedAt  },  "services": *[_type == "service"]{    "slug": slug.current,    _createdAt  },  "projects": *[_type == "project"]{    "slug": slug.current,    _createdAt  }}
export type SitemapQueryResult = {
  pages: Array<{
    slug: string | null;
    _createdAt: string;
  }>;
  blog: Array<{
    slug: string;
    publishedAt: string;
  }>;
  services: Array<{
    slug: string;
    _createdAt: string;
  }>;
  projects: Array<{
    slug: string;
    _createdAt: string;
  }>;
};
